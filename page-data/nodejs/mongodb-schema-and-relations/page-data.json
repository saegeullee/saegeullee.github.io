{"componentChunkName":"component---src-templates-post-template-js","path":"/nodejs/mongodb-schema-and-relations","webpackCompilationHash":"4befe4aec8a257750b94","result":{"data":{"markdownRemark":{"id":"8ce4a2a1-b013-5430-8574-fe58e4ddde99","html":"<blockquote>\n<p><strong><a href=\"https://www.udemy.com/course/mongodb-the-complete-developers-guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">유데미 몽고DB</a></strong> 수업을 듣고 정리한 내용입니다.</p>\n</blockquote>\n<h2 id=\"스키마-유효성-검사\"><a href=\"#%EC%8A%A4%ED%82%A4%EB%A7%88-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC\" aria-label=\"스키마 유효성 검사 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스키마 유효성 검사</h2>\n<p>몽고DB는 특정 컬렉션에 도큐먼트를 넣을 때 유효성 검사를 거쳐 검사를 통과했을 때만 도큐먼트가 컬렉션에 입력되도록 할 수 있다. 컬렉션 유효성 검사 추가는 아래의 예시와 같이 데이터베이스에 컬렉션을 추가 할 때 할 수 있다.\n아래의 예시 코드에서 <code class=\"language-text\">$jsonSchema</code>는 이 컬렉션의 유효성 검사를 하는 validator는 jsonSchema 라는 의미이다.<br>\n몽고DB의 역사를 보면 다양한 validator들이 있었지만 현재는 jsonSchema를 validator로 사용할 것이 권장되고 있다.\nrequired 에는 이 컬렉션에 추가되는 도큐먼트가 반드시 가지고 있어야 되는 프로퍼티들을 정의할 수 있다. 만약 추가되는 도큐먼트에 프로퍼티가 하나라도 없다면 컬렉션의 셋팅에 따라 에러 또는 경고(warning)을 발생시킬 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.createCollection(&#39;posts&#39;, {\n...   validator: {\n...     $jsonSchema: {\n...       bsonType: &#39;object&#39;,\n...       required: [&#39;title&#39;, &#39;text&#39;, &#39;creator&#39;, &#39;comments&#39;],\n...       properties: {\n...         title: {\n...           bsonType: &#39;string&#39;,\n...           description: &#39;must be a string and is required&#39;\n...         },\n...         text: {\n...           bsonType: &#39;string&#39;,\n...           description: &#39;must be a string and is required&#39;\n...         },\n...         creator: {\n...           bsonType: &#39;objectId&#39;,\n...           description: &#39;must be an objectid and is required&#39;\n...         },\n...         comments: {\n...           bsonType: &#39;array&#39;,\n...           description: &#39;must be an array and is required&#39;,\n...           items: {\n...             bsonType: &#39;object&#39;,\n...             required: [&#39;text&#39;, &#39;author&#39;],\n...             properties: {\n...               text: {\n...                 bsonType: &#39;string&#39;,\n...                 description: &#39;must be a string and is required&#39;\n...               },\n...               author: {\n...                 bsonType: &#39;objectId&#39;,\n...                 description: &#39;must be an objectid and is required&#39;\n...               }\n...             }\n...           }\n...         }\n...       }\n...     }\n...   }\n... });\n{ &quot;ok&quot; : 1 }</code></pre></div>\n<p>이제 posts 컬렉션의 유효성 검사를 하는 validator가 추가되었다. 이 컬렉션에 도큐먼트를 입력해보자. 위의 validator에서 정의한대로 도큐먼트를 입력하면 입력이 잘 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">db.posts.insertOne({\n  title: &#39;my first blog post&#39;,\n  text: &#39;excited to write this blog&#39;,\n  tags: [&#39;tech&#39;, &#39;js&#39;],\n  creator: ObjectId(&#39;5df26261c610a199922072f9&#39;),\n  comments: [{ text: &#39;very nice blog post&#39;, author: ObjectId(&#39;5df26261c610a199922072f9&#39;) }]\n});\n{\n\t&quot;acknowledged&quot; : true,\n\t&quot;insertedId&quot; : ObjectId(&quot;5df262dac610a199922072fa&quot;)\n}</code></pre></div>\n<p>하지만 validator에서 정의한대로 도큐먼트를 입력하지 않으면 다음과 같이 에러가 발생한다. 아래의 예시에서는 validator에서 정의한대로 comments의 author에 ObjectId 타입의 데이터를 넣지 않고 임의의 숫자를 넣었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">db.posts.insertOne({\n  title: &#39;my first blog post&#39;,\n  text: &#39;excited to write this blog&#39;,\n  tags: [&#39;tech&#39;, &#39;js&#39;],\n  creator: ObjectId(&#39;5df26261c610a199922072f9&#39;),\n  comments: [{ text: &#39;very nice blog post&#39;, author: 123123}]\n});\n\n2019-12-13T00:55:15.835+0900 E QUERY    [thread1] WriteError: Document failed validation :\nWriteError({\n\t&quot;index&quot; : 0,\n\t&quot;code&quot; : 121,\n\t&quot;errmsg&quot; : &quot;Document failed validation&quot;,\n\t&quot;op&quot; : {\n\t\t&quot;_id&quot; : ObjectId(&quot;5df262e3c610a199922072fb&quot;),\n\t\t&quot;title&quot; : &quot;my first blog post&quot;,\n\t\t&quot;text&quot; : &quot;excited to write this blog&quot;,\n\t\t&quot;tags&quot; : [\n\t\t\t&quot;tech&quot;,\n\t\t\t&quot;js&quot;\n\t\t],\n\t\t&quot;creator&quot; : ObjectId(&quot;5df26261c610a199922072f9&quot;),\n\t\t&quot;comments&quot; : [\n\t\t\t{\n\t\t\t\t&quot;text&quot; : &quot;very nice blog post&quot;,\n\t\t\t\t&quot;author&quot; : 123123\n\t\t\t}\n\t\t]\n\t}\n})\nWriteError@src/mongo/shell/bulk_api.js:466:48\nBulk/mergeBatchResults@src/mongo/shell/bulk_api.js:846:49\nBulk/executeBatch@src/mongo/shell/bulk_api.js:910:13\nBulk/this.execute@src/mongo/shell/bulk_api.js:1154:21\nDBCollection.prototype.insertOne@src/mongo/shell/crud_api.js:252:9\n@(shell):1:1</code></pre></div>\n<h2 id=\"validate-액션-변경하기\"><a href=\"#validate-%EC%95%A1%EC%85%98-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0\" aria-label=\"validate 액션 변경하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>validate 액션 변경하기</h2>\n<p>위의 스키마 유효성 검사를 통해 validator에서 정의한대로 도큐먼트가 컬렉션에 입력되지 않으면 에러가 발생했고 해당 도큐먼트는 데이터베이스에 입력이 되지 않았다. 하지만 에러를 발생시키는 대신에 경고만 할 수도 있다. 즉, 유효성 검사 레벨을 에러에서 경고로 낮출 수 있다. 이를 위해 다음과 같이 validator의 설정을 바꿔야 한다. <code class=\"language-text\">collMod</code> 는 <code class=\"language-text\">Collection Modifier</code>을 뜻한다. 이 코드에서는 디폴트 유효성 검사 레벨인 <code class=\"language-text\">validationAction: &#39;error&#39;</code> 을 <code class=\"language-text\">validationAction: &#39;warn&#39;</code>로 바꿨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">db.runCommand({\n  collMod: &#39;posts&#39;,\n  validator: {\n    $jsonSchema: {\n      bsonType: &#39;object&#39;,\n      required: [&#39;title&#39;, &#39;text&#39;, &#39;creator&#39;, &#39;comments&#39;],\n      properties: {\n        title: {\n          bsonType: &#39;string&#39;,\n          description: &#39;must be a string and is required&#39;\n        },\n        text: {\n          bsonType: &#39;string&#39;,\n          description: &#39;must be a string and is required&#39;\n        },\n        creator: {\n          bsonType: &#39;objectId&#39;,\n          description: &#39;must be an objectid and is required&#39;\n        },\n        comments: {\n          bsonType: &#39;array&#39;,\n          description: &#39;must be an array and is required&#39;,\n          items: {\n            bsonType: &#39;object&#39;,\n            required: [&#39;text&#39;, &#39;author&#39;],\n            properties: {\n              text: {\n                bsonType: &#39;string&#39;,\n                description: &#39;must be a string and is required&#39;\n              },\n              author: {\n                bsonType: &#39;objectId&#39;,\n                description: &#39;must be an objectid and is required&#39;\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  validationAction: &#39;warn&#39;\n});\n{ &quot;ok&quot; : 1 }</code></pre></div>\n<p>이제 validator의 정의와 다른 도큐먼트를 입력해보면 위에서 에러가 발생한 것과는 다르게 입력이 성공했다. 그리고 시스템의 로그 기록에 warning 을 남긴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">db.posts.insertOne({\n  title: &#39;my first blog post&#39;,\n  text: &#39;excited to write this blog&#39;,\n  tags: [&#39;tech&#39;, &#39;js&#39;],\n  creator: ObjectId(&#39;5df26261c610a199922072f9&#39;),\n  comments: [{ text: &#39;very nice blog post&#39;, author: 123123}]\n});\n{\n\t&quot;acknowledged&quot; : true,\n\t&quot;insertedId&quot; : ObjectId(&quot;5df26967c610a199922072fc&quot;)\n}</code></pre></div>","fields":{"slug":"/nodejs/mongodb-schema-and-relations","tagSlugs":["/tag/mongodb/"]},"frontmatter":{"date":"2019-12-12T23:10:37.121Z","description":"몽고DB는 특정 컬렉션에 도큐먼트를 넣을 때 유효성 검사를 거쳐 검사를 통과했을 때만 도큐먼트가 컬렉션에 입력되도록 할 수 있다. 컬렉션 유효성 검사 추가는 아래의 예시와 같이 데이터베이스에 컬렉션을 추가 할 때 할 수 있다...","tags":["mongodb"],"title":"MongoDB 스키마 유효성 검사","socialImage":"/media/image-2.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/nodejs/mongodb-schema-and-relations"}}}
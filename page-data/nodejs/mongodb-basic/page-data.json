{"componentChunkName":"component---src-templates-post-template-js","path":"/nodejs/mongodb-basic","result":{"data":{"markdownRemark":{"id":"28d8a37f-f48d-587c-84bc-2fe9fcc2cdc9","html":"<blockquote>\n<p><strong><a href=\"https://www.udemy.com/course/mongodb-the-complete-developers-guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">유데미 몽고DB</a></strong> 수업을 듣고 정리한 내용입니다.</p>\n</blockquote>\n<h1 id=\"이글의-목차\"><a href=\"#%EC%9D%B4%EA%B8%80%EC%9D%98-%EB%AA%A9%EC%B0%A8\" aria-label=\"이글의 목차 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이글의 목차</h1>\n<ul>\n<li><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EB%AA%A9%EB%A1%9D-%EB%B3%B4%EA%B8%B0\">데이터베이스 목록 보기</a></li>\n<li><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\">데이터베이스 생성하기</a></li>\n<li><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0\">데이터베이스 삭제하기</a></li>\n<li><a href=\"#%EB%A1%9C%EC%BB%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A1%9C-db-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0\">로컬 데이터로 db 구축하기</a></li>\n<li><a href=\"#%EC%BB%AC%EB%A0%89%EC%85%98-%EC%B6%94%EA%B0%80-%EB%B0%8F-%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8-%EC%9E%85%EB%A0%A5%ED%95%98%EA%B8%B0\">컬렉션 추가 및 도큐먼트 입력하기</a></li>\n<li><a href=\"#%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8%ED%95%98%EA%B8%B0\">도큐먼트 업데이트하기</a></li>\n<li><a href=\"#%EC%97%AC%EB%9F%AC-%EA%B0%9C%EC%9D%98-%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8-%ED%95%9C%EB%B2%88%EC%97%90-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8%ED%95%98%EA%B8%B0\">여러 개의 도큐먼트 한번에 업데이트하기</a></li>\n<li><a href=\"#%EC%97%AC%EB%9F%AC-%EA%B0%9C%EC%9D%98-%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8-%ED%95%9C%EB%B2%88%EC%97%90-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0\">여러 개의 도큐먼트 한번에 삭제하기</a></li>\n<li><a href=\"#%EC%97%AC%EB%9F%AC-%EA%B0%9C%EC%9D%98-%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8-%ED%95%9C%EB%B2%88%EC%97%90-%EC%9E%85%EB%A0%A5%ED%95%98%EA%B8%B0\">여러 개의 도큐먼트 한번에 입력하기</a></li>\n<li><a href=\"#%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8-%EC%BF%BC%EB%A6%AC%ED%95%98%EA%B8%B0\">도큐먼트 쿼리하기</a></li>\n<li><a href=\"#update-vs-updatemany\">update vs updateMany</a></li>\n<li><a href=\"#replaceone\">replaceOne</a></li>\n<li><a href=\"#find-%ED%95%A8%EC%88%98-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\">find 함수 이해하기</a></li>\n<li><a href=\"#%EB%AA%BD%EA%B3%A0db-%ED%94%84%EB%A1%9C%EC%A0%9D%EC%85%98\">몽고db 프로젝션</a></li>\n<li><a href=\"#%EB%B3%B5%EC%9E%A1%ED%95%9C-%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0\">복잡한 도큐먼트 접근하기</a></li>\n</ul>\n<h2 id=\"데이터베이스-목록-보기\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EB%AA%A9%EB%A1%9D-%EB%B3%B4%EA%B8%B0\" aria-label=\"데이터베이스 목록 보기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터베이스 목록 보기</h2>\n<p>몽고DB 쉘 실행 후 아래의 명령어를 통해 데이터베이스 목록을 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt;show dbs;\nadmin         0.000GB\nclass101      0.001GB\nconfig        0.000GB\njumsul        0.000GB\nlocal         0.000GB\ntask-manager  0.000GB\ntest          0.000GB</code></pre></div>\n<h2 id=\"데이터베이스-생성하기\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"데이터베이스 생성하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터베이스 생성하기</h2>\n<p>다음 명령어를 통해 특정 데이터베이스를 사용한다. 기존에 있는 데이터베이스라면 기존의 데이터베이스를 사용하고 없다면 새로운 데이터베이스를 생성한다. 아래의 예시에서는 기존에 없던 새로운 <code class=\"language-text\">flight</code>라는 데이터베이스를 생성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt;use flight\nswitched to db flight</code></pre></div>\n<h2 id=\"데이터베이스-삭제하기\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0\" aria-label=\"데이터베이스 삭제하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터베이스 삭제하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; show dbs;\nadmin         0.000GB\nclass101      0.001GB\nconfig        0.000GB\nflight        0.000GB\njumsul        0.000GB\nlocal         0.000GB\ntask-manager  0.000GB\ntest          0.000GB\n&gt; use test\nswitched to db test\n&gt; db.dropDatabase()\n{ &quot;dropped&quot; : &quot;test&quot;, &quot;ok&quot; : 1 }</code></pre></div>\n<h2 id=\"로컬-데이터로-db-구축하기\"><a href=\"#%EB%A1%9C%EC%BB%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A1%9C-db-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0\" aria-label=\"로컬 데이터로 db 구축하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로컬 데이터로 DB 구축하기</h2>\n<p>터미널에서 다음의 명령어로 mongoDB에 곧바로 데이터를 import 할 수 있다. 현재 경로는 persons.json 파일이 있는 경로여야 한다. 이 명령은 contactsData 데이터베이스를 생성하고 contacts 컬렉션에 persons.json의 데이터를 넣는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mongoimport persons.json -d contactsData -c contacts --jsonArray</code></pre></div>\n<h2 id=\"컬렉션-추가-및-도큐먼트-입력하기\"><a href=\"#%EC%BB%AC%EB%A0%89%EC%85%98-%EC%B6%94%EA%B0%80-%EB%B0%8F-%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8-%EC%9E%85%EB%A0%A5%ED%95%98%EA%B8%B0\" aria-label=\"컬렉션 추가 및 도큐먼트 입력하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컬렉션 추가 및 도큐먼트 입력하기</h2>\n<p>다음은 <code class=\"language-text\">flightData</code>라는 컬렉션을 만들어 새로운 도큐먼트를 입력하는 명령어이다. 마찬가지로 이미 이 데이터베이스에 있는 컬렉션이라면 해당 컬렉션에 도큐먼트를 추가하고, 그렇지 않다면 새로운 컬렉션을 만들고 도큐먼트를 입력한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.flightData.insertOne({departure: &quot;MUC&quot;})\n{\n\t&quot;acknowledged&quot; : true,\n\t&quot;insertedId&quot; : ObjectId(&quot;5def61e6a71650b73644582f&quot;)\n}</code></pre></div>\n<p>다음 명령어를 통해 새로 만든 컬렉션을 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; show collections\nflightData</code></pre></div>\n<p>그리고 이 컬렉션에 방금 입력한 데이터를 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.flightData.find()\n{ &quot;_id&quot; : ObjectId(&quot;5def61e6a71650b73644582f&quot;), &quot;departure&quot; : &quot;MUC&quot; }</code></pre></div>\n<h2 id=\"도큐먼트-업데이트하기\"><a href=\"#%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8%ED%95%98%EA%B8%B0\" aria-label=\"도큐먼트 업데이트하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도큐먼트 업데이트하기</h2>\n<p>다음 명령어를 통해 도큐먼트를 업데이트 할 수 있다. flightData 컬렉션에 있는 도큐먼트 중에 departure 프로퍼티가 “MUC”인 것을 찾아 marker라는 프로퍼티를 추가했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.flightData.updateOne({departure: &quot;MUC&quot;}, {$set : {marker:&quot;delete&quot;}})\n{ &quot;acknowledged&quot; : true, &quot;matchedCount&quot; : 1, &quot;modifiedCount&quot; : 1 }</code></pre></div>\n<p>다음 명령어를 통해 업데이트가 잘 되었는지 확인해본다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.flightData.find().pretty()\n{\n\t&quot;_id&quot; : ObjectId(&quot;5def61e6a71650b73644582f&quot;),\n\t&quot;departure&quot; : &quot;MUC&quot;,\n\t&quot;marker&quot; : &quot;delete&quot;\n}</code></pre></div>\n<h2 id=\"여러-개의-도큐먼트-한번에-업데이트하기\"><a href=\"#%EC%97%AC%EB%9F%AC-%EA%B0%9C%EC%9D%98-%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8-%ED%95%9C%EB%B2%88%EC%97%90-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8%ED%95%98%EA%B8%B0\" aria-label=\"여러 개의 도큐먼트 한번에 업데이트하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러 개의 도큐먼트 한번에 업데이트하기</h2>\n<p>여러개의 도큐먼트를 한번에 업데이트 할 수도 있다. 이를 위해 새로운 도큐먼트 하나를 추가로 입력하고 확인한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.flightData.insertOne({departure: &quot;TXL&quot;, arrivalAirport: &quot;LHR&quot;})\n{\n\t&quot;acknowledged&quot; : true,\n\t&quot;insertedId&quot; : ObjectId(&quot;5def620ba71650b736445830&quot;)\n}\n&gt; db.flightData.find().pretty()\n{\n\t&quot;_id&quot; : ObjectId(&quot;5def61e6a71650b73644582f&quot;),\n\t&quot;departure&quot; : &quot;MUC&quot;,\n\t&quot;marker&quot; : &quot;delete&quot;\n}\n{\n\t&quot;_id&quot; : ObjectId(&quot;5def620ba71650b736445830&quot;),\n\t&quot;departure&quot; : &quot;TXL&quot;,\n\t&quot;arrivalAirport&quot; : &quot;LHR&quot;\n}</code></pre></div>\n<p>다음의 명령어를 통해 이 컬렉션에 있는 모든 도큐먼트를 업데이트 할 수 있다. <code class=\"language-text\">updatedMany</code>의 첫번째 인자에 빈 객체를 넣음으로서 이 컬렉션에 있는 모든 도큐먼트를 선택하여 업데이트를 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.flightData.updateMany({}, {$set : {marker:&quot;toDelete&quot;}})\n{ &quot;acknowledged&quot; : true, &quot;matchedCount&quot; : 2, &quot;modifiedCount&quot; : 2 }</code></pre></div>\n<p>업데이트 된 것을 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.flightData.find().pretty()\n{\n\t&quot;_id&quot; : ObjectId(&quot;5def61e6a71650b73644582f&quot;),\n\t&quot;departure&quot; : &quot;MUC&quot;,\n\t&quot;marker&quot; : &quot;toDelete&quot;\n}\n{\n\t&quot;_id&quot; : ObjectId(&quot;5def620ba71650b736445830&quot;),\n\t&quot;departure&quot; : &quot;TXL&quot;,\n\t&quot;arrivalAirport&quot; : &quot;LHR&quot;,\n\t&quot;marker&quot; : &quot;toDelete&quot;\n}</code></pre></div>\n<h2 id=\"여러-개의-도큐먼트-한번에-삭제하기\"><a href=\"#%EC%97%AC%EB%9F%AC-%EA%B0%9C%EC%9D%98-%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8-%ED%95%9C%EB%B2%88%EC%97%90-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0\" aria-label=\"여러 개의 도큐먼트 한번에 삭제하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러 개의 도큐먼트 한번에 삭제하기</h2>\n<p>다음 명령어를 통해 컬렉션에 있는 모든 도큐먼트를 한번에 삭제할 수도 있다. 이 컬렉션에 있는 모든 도큐먼트 중 marker 프로퍼티의 값이 “toDelete”인 모든 도큐먼트를 삭제한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.flightData.deleteMany({marker: &quot;toDelete&quot;})\n{ &quot;acknowledged&quot; : true, &quot;deletedCount&quot; : 2 }</code></pre></div>\n<p>이를 확인해보면 다음 명령어를 쳤을 때 아무 도큐먼트가 뜨지 않는 것을 보니 컬렉션에 있는 모든 도큐먼트가 잘 지워졌다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.flightData.find()</code></pre></div>\n<h2 id=\"여러-개의-도큐먼트-한번에-입력하기\"><a href=\"#%EC%97%AC%EB%9F%AC-%EA%B0%9C%EC%9D%98-%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8-%ED%95%9C%EB%B2%88%EC%97%90-%EC%9E%85%EB%A0%A5%ED%95%98%EA%B8%B0\" aria-label=\"여러 개의 도큐먼트 한번에 입력하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러 개의 도큐먼트 한번에 입력하기</h2>\n<p>다음의 명령어를 통해 컬렉션에 여러 개의 도큐먼트를 한번에 입력할 수 있다. <code class=\"language-text\">insertMany</code>에는 입력하고자 하는 여러개의 객체를 배열로 넣어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.flightData.insertMany([\n... {\n...   &quot;departureAirport&quot;: &quot;MUC&quot;,\n...   &quot;arrivalAirport&quot;: &quot;SFO&quot;,\n...   &quot;aircraft&quot;: &quot;Airbus A380&quot;,\n...   &quot;distance&quot;: 12000,\n...   &quot;intercontinental&quot;: true\n... },\n... {\n...   &quot;departureAirport&quot;: &quot;LHR&quot;,\n...   &quot;arrivalAirport&quot;: &quot;TXL&quot;,\n...   &quot;aircraft&quot;: &quot;Airbus A320&quot;,\n...   &quot;distance&quot;: 950,\n...   &quot;intercontinental&quot;: false\n... }])\n{\n\t&quot;acknowledged&quot; : true,\n\t&quot;insertedIds&quot; : [\n\t\tObjectId(&quot;5defbde2a71650b736445834&quot;),\n\t\tObjectId(&quot;5defbde2a71650b736445835&quot;)\n\t]\n}</code></pre></div>\n<p>데이터가 잘 들어갔음을 확인해볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.flightData.find().pretty()\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defbde2a71650b736445834&quot;),\n\t&quot;departureAirport&quot; : &quot;MUC&quot;,\n\t&quot;arrivalAirport&quot; : &quot;SFO&quot;,\n\t&quot;aircraft&quot; : &quot;Airbus A380&quot;,\n\t&quot;distance&quot; : 12000,\n\t&quot;intercontinental&quot; : true\n}\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defbde2a71650b736445835&quot;),\n\t&quot;departureAirport&quot; : &quot;LHR&quot;,\n\t&quot;arrivalAirport&quot; : &quot;TXL&quot;,\n\t&quot;aircraft&quot; : &quot;Airbus A320&quot;,\n\t&quot;distance&quot; : 950,\n\t&quot;intercontinental&quot; : false\n}</code></pre></div>\n<h2 id=\"도큐먼트-쿼리하기\"><a href=\"#%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8-%EC%BF%BC%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"도큐먼트 쿼리하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도큐먼트 쿼리하기</h2>\n<p>다음 명령어를 통해 컬렉션에서 distance 프로퍼티가 900 이상인 도큐먼트만을 쿼리할 수 있다. <code class=\"language-text\">$gt</code>의 gt는 greater than의 이니셜이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.flightData.find({distance: {$gt : 900}}).pretty()\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defbde2a71650b736445834&quot;),\n\t&quot;departureAirport&quot; : &quot;MUC&quot;,\n\t&quot;arrivalAirport&quot; : &quot;SFO&quot;,\n\t&quot;aircraft&quot; : &quot;Airbus A380&quot;,\n\t&quot;distance&quot; : 12000,\n\t&quot;intercontinental&quot; : true\n}\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defbde2a71650b736445835&quot;),\n\t&quot;departureAirport&quot; : &quot;LHR&quot;,\n\t&quot;arrivalAirport&quot; : &quot;TXL&quot;,\n\t&quot;aircraft&quot; : &quot;Airbus A320&quot;,\n\t&quot;distance&quot; : 950,\n\t&quot;intercontinental&quot; : false\n}</code></pre></div>\n<p>기준을 1000으로 줬을 때는 위의 결과와 달리 1개의 도큐먼트만 나타난다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.flightData.find({distance: {$gt : 1000}}).pretty()\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defbde2a71650b736445834&quot;),\n\t&quot;departureAirport&quot; : &quot;MUC&quot;,\n\t&quot;arrivalAirport&quot; : &quot;SFO&quot;,\n\t&quot;aircraft&quot; : &quot;Airbus A380&quot;,\n\t&quot;distance&quot; : 12000,\n\t&quot;intercontinental&quot; : true\n}</code></pre></div>\n<p>다음 명령어 <code class=\"language-text\">findOne</code>은 특정 기준을 만족하는 단 하나의 도큐먼트만을 쿼리한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.flightData.findOne({distance: {$gt : 900}})\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defbde2a71650b736445834&quot;),\n\t&quot;departureAirport&quot; : &quot;MUC&quot;,\n\t&quot;arrivalAirport&quot; : &quot;SFO&quot;,\n\t&quot;aircraft&quot; : &quot;Airbus A380&quot;,\n\t&quot;distance&quot; : 12000,\n\t&quot;intercontinental&quot; : true\n}</code></pre></div>\n<h2 id=\"update-vs-updatemany\"><a href=\"#update-vs-updatemany\" aria-label=\"update vs updatemany permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>update vs updateMany</h2>\n<p><code class=\"language-text\">updateOne</code>과 <code class=\"language-text\">updateMany</code>는 기존의 도큐먼트에 새로운 프로퍼티가 추가된다. 예를들어 _id가 <code class=\"language-text\">ObjectId(&quot;5defbde2a71650b736445834&quot;)</code> 인 도큐먼트를 다음과 같이 업데이트를 하면 새로 업데이트한 delayed 프로퍼티가 기존의 도큐먼트에 추가되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.flightData.updateOne({_id: ObjectId(&quot;5defbde2a71650b736445834&quot;)},\n{$set : {delayed: false}})\n{ &quot;acknowledged&quot; : true, &quot;matchedCount&quot; : 1, &quot;modifiedCount&quot; : 1 }\n&gt; db.flightData.find().pretty()\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defbde2a71650b736445834&quot;),\n\t&quot;departureAirport&quot; : &quot;MUC&quot;,\n\t&quot;arrivalAirport&quot; : &quot;SFO&quot;,\n\t&quot;aircraft&quot; : &quot;Airbus A380&quot;,\n\t&quot;distance&quot; : 12000,\n\t&quot;intercontinental&quot; : true,\n\t&quot;delayed&quot; : false\n}\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defbde2a71650b736445835&quot;),\n\t&quot;departureAirport&quot; : &quot;LHR&quot;,\n\t&quot;arrivalAirport&quot; : &quot;TXL&quot;,\n\t&quot;aircraft&quot; : &quot;Airbus A320&quot;,\n\t&quot;distance&quot; : 950,\n\t&quot;intercontinental&quot; : false\n}</code></pre></div>\n<p>하지만 <code class=\"language-text\">update</code> 함수는 어떨까? 아래의 결과를 보면 도큐먼트에 기존에 있던 프로퍼티를 모두 삭제하고 새로 업데이트한 프로퍼티만 추가되었다. 주의할 점은 update 함수의 두번째 인자이다. update 함수의 두번째 인자에는 <code class=\"language-text\">{$set }</code> 부분이 빠져있다. updateOne과 updateMany의 두번째 인자에 <code class=\"language-text\">{$set }</code>를 빼면 에러가 난다. 그런데 update 함수에 <code class=\"language-text\">{$set }</code>를 넣으면 updateOne과 마찬가지로 기존의 프로퍼티에 새로운 프로퍼티가 추가가 된다. 헷갈린다..</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.flightData.update({_id: ObjectId(&quot;5defbde2a71650b736445834&quot;)},\n{delayed: true})\nWriteResult({ &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 })\n\n&gt; db.flightData.find().pretty()\n{ &quot;_id&quot; : ObjectId(&quot;5defbde2a71650b736445834&quot;), &quot;delayed&quot; : true }\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defbde2a71650b736445835&quot;),\n\t&quot;departureAirport&quot; : &quot;LHR&quot;,\n\t&quot;arrivalAirport&quot; : &quot;TXL&quot;,\n\t&quot;aircraft&quot; : &quot;Airbus A320&quot;,\n\t&quot;distance&quot; : 950,\n\t&quot;intercontinental&quot; : false\n}</code></pre></div>\n<h2 id=\"replaceone\"><a href=\"#replaceone\" aria-label=\"replaceone permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>replaceOne</h2>\n<p>그래서 위 경우에는 update 보다는 replaceOne 함수를 사용하는 것이 좋다. replaceOne은 함수 이름에서 유추해볼 수 있듯이 업데이트 내용이 기존의 내용을 대체한다. 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.flightData.replaceOne({_id: ObjectId(&quot;5defbde2a71650b736445834&quot;)},   {\n...     &quot;departureAirport&quot;: &quot;MUC&quot;,\n...     &quot;arrivalAirport&quot;: &quot;SFO&quot;,\n...     &quot;aircraft&quot;: &quot;Airbus A380&quot;,\n...     &quot;distance&quot;: 12000,\n...     &quot;intercontinental&quot;: true\n...   })\n{ &quot;acknowledged&quot; : true, &quot;matchedCount&quot; : 1, &quot;modifiedCount&quot; : 1 }</code></pre></div>\n<p>기존에 있던 delayed 프로퍼티는 없어지고 새로 추가한 프로퍼티들만 도큐먼트에 추가된 것을 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.flightData.find().pretty()\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defbde2a71650b736445834&quot;),\n\t&quot;departureAirport&quot; : &quot;MUC&quot;,\n\t&quot;arrivalAirport&quot; : &quot;SFO&quot;,\n\t&quot;aircraft&quot; : &quot;Airbus A380&quot;,\n\t&quot;distance&quot; : 12000,\n\t&quot;intercontinental&quot; : true\n}\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defbde2a71650b736445835&quot;),\n\t&quot;departureAirport&quot; : &quot;LHR&quot;,\n\t&quot;arrivalAirport&quot; : &quot;TXL&quot;,\n\t&quot;aircraft&quot; : &quot;Airbus A320&quot;,\n\t&quot;distance&quot; : 950,\n\t&quot;intercontinental&quot; : false\n}</code></pre></div>\n<h2 id=\"find-함수-이해하기\"><a href=\"#find-%ED%95%A8%EC%88%98-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"find 함수 이해하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>find 함수 이해하기</h2>\n<p>몽고DB에서 컬렉션의 도큐먼트를 쿼리 할 때는 find 함수를 사용한다. find 함수는 도큐먼트를 곧바로 리턴하지 않고 <code class=\"language-text\">커서(Cursor) 객체</code>를 리턴한다. 만약 컬렉션에 20개 이상의 도큐먼트가 있을때 find 함수로 모든 도큐먼트를 찾으면 20개의 도큐먼트가 나오고 맨 아래에 다음과 같이 나타난다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">...\n{ &quot;_id&quot; : ObjectId(&quot;5defd370c79996355df1cbad&quot;), &quot;name&quot; : &quot;Klaus Arber&quot;, &quot;age&quot; : 53 }\n{ &quot;_id&quot; : ObjectId(&quot;5defd370c79996355df1cbae&quot;), &quot;name&quot; : &quot;Albert Twostone&quot;, &quot;age&quot; : 68 }\nType &quot;it&quot; for more</code></pre></div>\n<p>그리고 몽고 쉘에 it을 입력하면 그 다음 도큐먼트가 나온다. it을 입력함으로써 위의 find 함수에서 리턴된 커서 객체를 사용하여 다음 도큐먼트들을 가져온것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; it\n{ &quot;_id&quot; : ObjectId(&quot;5defd370c79996355df1cbaf&quot;), &quot;name&quot; : &quot;Gordon Black&quot;, &quot;age&quot; : 38 }\n...</code></pre></div>\n<p>몽고DB는 커서 객체에 사용할 수 있는 <code class=\"language-text\">toArray()</code>, <code class=\"language-text\">forEach()</code>와 같은 여러가지 함수들을 제공한다. <code class=\"language-text\">toArray()</code>는 도큐먼트의 배열을 리턴한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.passengers.find().toArray()\n[\n\t{\n\t\t&quot;_id&quot; : ObjectId(&quot;5defd370c79996355df1cb9b&quot;),\n\t\t&quot;name&quot; : &quot;Max Schwarzmueller&quot;,\n\t\t&quot;age&quot; : 29\n\t},\n\t{\n\t\t&quot;_id&quot; : ObjectId(&quot;5defd370c79996355df1cb9c&quot;),\n\t\t&quot;name&quot; : &quot;Manu Lorenz&quot;,\n\t\t&quot;age&quot; : 30\n\t}\n  ...\n]</code></pre></div>\n<p><code class=\"language-text\">forEach()</code> 함수는 다음과 같이 사용할 수 있다. 마치 자바스크립트 배열의 forEach 함수와 같이 작동한다. passengers 컬렉션의 모든 도큐먼트에 각각 printjson 함수를 호출하여 결과를 출력하고 있다. 너무 신기해서 <code class=\"language-text\">mongodb shell language</code> 로 검색을 해보니.. <code class=\"language-text\">The mongo shell is an interactive JavaScript interface to MongoDB</code>라고 한다. 몽고 쉘이 몽고DB에서 자바스크립트를 사용할 수 있게 해주는 인터페이스가 된다고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.passengers.find().forEach(doc =&gt; printjson(doc))\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defd370c79996355df1cb9b&quot;),\n\t&quot;name&quot; : &quot;Max&quot;,\n\t&quot;age&quot; : 29\n}\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defd370c79996355df1cb9c&quot;),\n\t&quot;name&quot; : &quot;Manu Lorenz&quot;,\n\t&quot;age&quot; : 30\n}\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defd370c79996355df1cb9d&quot;),\n\t&quot;name&quot; : &quot;Chris Hayton&quot;,\n\t&quot;age&quot; : 35\n}\n...</code></pre></div>\n<h2 id=\"몽고db-프로젝션\"><a href=\"#%EB%AA%BD%EA%B3%A0db-%ED%94%84%EB%A1%9C%EC%A0%9D%EC%85%98\" aria-label=\"몽고db 프로젝션 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>몽고DB 프로젝션</h2>\n<p>컬렉션의 도큐먼트 쿼리는 다음과 같이 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.passengers.find().pretty()\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defd370c79996355df1cb9b&quot;),\n\t&quot;name&quot; : &quot;Max Schwarzmueller&quot;,\n\t&quot;age&quot; : 29\n}\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defd370c79996355df1cb9c&quot;),\n\t&quot;name&quot; : &quot;Manu Lorenz&quot;,\n\t&quot;age&quot; : 30\n}</code></pre></div>\n<p>만약 도큐먼트의 모든 프로퍼티가 아니라 특정 프로퍼티만을 쿼리하고 싶을 때는 다음과 같이 하면 된다. <code class=\"language-text\">{name: 1}</code> 객체의 1은 name 프로퍼티를 쿼리하라는 뜻이다. <code class=\"language-text\">_id</code> 프로퍼티는 디폴트로 무조건 쿼리된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.passengers.find({}, {name: 1}).pretty()\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defd370c79996355df1cb9b&quot;),\n\t&quot;name&quot; : &quot;Max Schwarzmueller&quot;\n}\n{ &quot;_id&quot; : ObjectId(&quot;5defd370c79996355df1cb9c&quot;), &quot;name&quot; : &quot;Manu Lorenz&quot; }</code></pre></div>\n<p>만약 <code class=\"language-text\">_id</code>도 빼고 name 프로퍼티만 보고 싶다면 다음과 같이 쿼리하면된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.passengers.find({}, {name: 1, _id:0}).pretty()\n{ &quot;name&quot; : &quot;Max Schwarzmueller&quot; }\n{ &quot;name&quot; : &quot;Manu Lorenz&quot; }</code></pre></div>\n<h2 id=\"복잡한-도큐먼트-접근하기\"><a href=\"#%EB%B3%B5%EC%9E%A1%ED%95%9C-%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0\" aria-label=\"복잡한 도큐먼트 접근하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>복잡한 도큐먼트 접근하기</h2>\n<h3 id=\"배열-접근\"><a href=\"#%EB%B0%B0%EC%97%B4-%EC%A0%91%EA%B7%BC\" aria-label=\"배열 접근 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열 접근</h3>\n<p>다음과 같이 passengers 컬렉션의 도큐먼트 하나에 hobbies 프로퍼티를 추가하여 string 배열을 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.passengers.updateOne({name: &quot;Albert Twostone&quot;},\n{$set : {hobbies: [&quot;sports&quot;, &quot;cooking&quot;] }})\n{ &quot;acknowledged&quot; : true, &quot;matchedCount&quot; : 1, &quot;modifiedCount&quot; : 1 }\n&gt; db.passengers.find({name: &quot;Albert Twostone&quot;}).pretty()\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defd370c79996355df1cbae&quot;),\n\t&quot;name&quot; : &quot;Albert Twostone&quot;,\n\t&quot;age&quot; : 68,\n\t&quot;hobbies&quot; : [\n\t\t&quot;sports&quot;,\n\t\t&quot;cooking&quot;\n\t]\n}```</code></pre></div>\n<p>방금 추가한 hobbies 프로퍼티에 다음과 같이 접근할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.passengers.findOne({name: &quot;Albert Twostone&quot;}).hobbies\n[ &quot;sports&quot;, &quot;cooking&quot; ]</code></pre></div>\n<p>다음의 쿼리는 좀 신기한데.. hobbies 프로퍼티의 값은 배열이다. 하지만 아래와 같이 쿼리해도 몽고DB는 hobbies 프로퍼티의 값이 배열임을 알고 배열을 순회하여 sports를 찾는다. 해당 값이 배열 안에 있다면 그 도큐먼트를 리턴한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.passengers.find({hobbies: &quot;sports&quot;}).pretty()\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defd370c79996355df1cbae&quot;),\n\t&quot;name&quot; : &quot;Albert Twostone&quot;,\n\t&quot;age&quot; : 68,\n\t&quot;hobbies&quot; : [\n\t\t&quot;sports&quot;,\n\t\t&quot;cooking&quot;\n\t]\n}</code></pre></div>\n<h3 id=\"객체접근\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%A0%91%EA%B7%BC\" aria-label=\"객체접근 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체접근</h3>\n<p>위 예시의 flightData 컬렉션에 다음과 같이 프로퍼티를 추가하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.flightData.updateMany({}, {$set : {status:\n{description: &quot;on-time&quot;, lastUpdated: &quot;1 hour ago&quot;, details: {responsible: &quot;louieslee&quot;}}}})\n{ &quot;acknowledged&quot; : true, &quot;matchedCount&quot; : 2, &quot;modifiedCount&quot; : 2 }\n&gt; db.flightData.find().pretty()\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defbde2a71650b736445834&quot;),\n\t&quot;departureAirport&quot; : &quot;MUC&quot;,\n\t&quot;arrivalAirport&quot; : &quot;SFO&quot;,\n\t&quot;aircraft&quot; : &quot;Airbus A380&quot;,\n\t&quot;distance&quot; : 12000,\n\t&quot;intercontinental&quot; : true,\n\t&quot;status&quot; : {\n\t\t&quot;description&quot; : &quot;on-time&quot;,\n\t\t&quot;lastUpdated&quot; : &quot;1 hour ago&quot;,\n\t\t&quot;details&quot; : {\n\t\t\t&quot;responsible&quot; : &quot;louieslee&quot;\n\t\t}\n\t}\n}\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defbde2a71650b736445835&quot;),\n\t&quot;departureAirport&quot; : &quot;LHR&quot;,\n\t&quot;arrivalAirport&quot; : &quot;TXL&quot;,\n\t&quot;aircraft&quot; : &quot;Airbus A320&quot;,\n\t&quot;distance&quot; : 950,\n\t&quot;intercontinental&quot; : false,\n\t&quot;status&quot; : {\n\t\t&quot;description&quot; : &quot;on-time&quot;,\n\t\t&quot;lastUpdated&quot; : &quot;1 hour ago&quot;,\n\t\t&quot;details&quot; : {\n\t\t\t&quot;responsible&quot; : &quot;louieslee&quot;\n\t\t}\n\t}\n}</code></pre></div>\n<p>이 때 쿼리를 다음과 같이 할 수 있다. 쿼리할 때 <code class=\"language-text\">&quot;status.details.responsible&quot;</code> 에는 반드시 쌍따옴표를 붙여야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; db.flightData.find({&quot;status.details.responsible&quot; : &quot;louieslee&quot;}).pretty()\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defbde2a71650b736445834&quot;),\n\t&quot;departureAirport&quot; : &quot;MUC&quot;,\n\t&quot;arrivalAirport&quot; : &quot;SFO&quot;,\n\t&quot;aircraft&quot; : &quot;Airbus A380&quot;,\n\t&quot;distance&quot; : 12000,\n\t&quot;intercontinental&quot; : true,\n\t&quot;status&quot; : {\n\t\t&quot;description&quot; : &quot;on-time&quot;,\n\t\t&quot;lastUpdated&quot; : &quot;1 hour ago&quot;,\n\t\t&quot;details&quot; : {\n\t\t\t&quot;responsible&quot; : &quot;louieslee&quot;\n\t\t}\n\t}\n}\n{\n\t&quot;_id&quot; : ObjectId(&quot;5defbde2a71650b736445835&quot;),\n\t&quot;departureAirport&quot; : &quot;LHR&quot;,\n\t&quot;arrivalAirport&quot; : &quot;TXL&quot;,\n\t&quot;aircraft&quot; : &quot;Airbus A320&quot;,\n\t&quot;distance&quot; : 950,\n\t&quot;intercontinental&quot; : false,\n\t&quot;status&quot; : {\n\t\t&quot;description&quot; : &quot;on-time&quot;,\n\t\t&quot;lastUpdated&quot; : &quot;1 hour ago&quot;,\n\t\t&quot;details&quot; : {\n\t\t\t&quot;responsible&quot; : &quot;louieslee&quot;\n\t\t}\n\t}\n}</code></pre></div>","fields":{"slug":"/nodejs/mongodb-basic","tagSlugs":["/tag/mongodb/"]},"frontmatter":{"date":"2019-12-10T01:10:37.121Z","description":"몽고DB의 기본에 대해 알아본다. 데이터베이스 목록보기, 생성 및 삭제하기, 그 후 데이터베이스에 컬렉션 추가 및 도큐먼트 쿼리, 입력, 업데이트, 여러개의 도큐먼트 한번에 입력, 업데이트 삭제하는 방법 등등에 대해 알아본다.","tags":["mongodb"],"title":"MongoDB 쿼리 기본","socialImage":"/media/image-2.jpg"}}},"pageContext":{"slug":"/nodejs/mongodb-basic"}},"staticQueryHashes":["251939775","3439816877","401334301"]}
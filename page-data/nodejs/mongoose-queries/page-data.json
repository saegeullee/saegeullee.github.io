{"componentChunkName":"component---src-templates-post-template-js","path":"/nodejs/mongoose-queries","result":{"data":{"markdownRemark":{"id":"4d07a3ac-6b21-5267-b2d3-cdc131144b3b","html":"<p>이 포스팅에서는 nodejs 어플리케이션을 개발하면서 새로 배웠거나 중요한 몽구스 쿼리에 대해 정리한다.</p>\n<h1 id=\"목차\"><a href=\"#%EB%AA%A9%EC%B0%A8\" aria-label=\"목차 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목차</h1>\n<ul>\n<li><a href=\"#populate%ED%95%9C-%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8%EC%9D%98-%ED%8A%B9%EC%A0%95%ED%95%84%EB%93%9C%EB%A5%BC-%EB%8B%A4%EC%8B%9C-populate%ED%95%98%EA%B8%B0\">populate한 도큐먼트의 특정필드를 다시 populate하기</a></li>\n<li><a href=\"#aggregate-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A1%9C-%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8-%EA%B7%B8%EB%A3%B9%EC%A7%93%EA%B8%B0\">aggregate 메서드로 도큐먼트 그룹짓기</a></li>\n<li><a href=\"#%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8%EC%8B%9C-runvalidator-%EC%98%B5%EC%85%98%EC%A3%BC%EA%B8%B0\">도큐먼트 업데이트시 runvalidator 옵션주기</a></li>\n</ul>\n<h2 id=\"populate한-도큐먼트의-특정필드를-다시-populate하기\"><a href=\"#populate%ED%95%9C-%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8%EC%9D%98-%ED%8A%B9%EC%A0%95%ED%95%84%EB%93%9C%EB%A5%BC-%EB%8B%A4%EC%8B%9C-populate%ED%95%98%EA%B8%B0\" aria-label=\"populate한 도큐먼트의 특정필드를 다시 populate하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>populate한 도큐먼트의 특정필드를 다시 populate하기</h2>\n<p><code class=\"language-text\">Item</code> 모델의 스키마를 보면 다음과 같이 4개의 필드가 다른 모델의 reference를 가지고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> itemSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  provisionHistory<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">:</span> <span class=\"token string\">'Provision'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  owner<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">:</span> <span class=\"token string\">'Member'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  itemType<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">:</span> <span class=\"token string\">'ItemType'</span><span class=\"token punctuation\">,</span> required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  model<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">:</span> <span class=\"token string\">'ItemModel'</span><span class=\"token punctuation\">,</span> required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Item'</span><span class=\"token punctuation\">,</span> itemSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Item 을 쿼리할 때 reference를 가지고 있는 모델의 데이터를 가지고 오고 싶으면 다음과 같이 populate를 하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Item<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">:</span> <span class=\"token string\">'itemType'</span><span class=\"token punctuation\">,</span> select<span class=\"token punctuation\">:</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">:</span> <span class=\"token string\">'model'</span><span class=\"token punctuation\">,</span> select<span class=\"token punctuation\">:</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">:</span> <span class=\"token string\">'owner'</span><span class=\"token punctuation\">,</span> select<span class=\"token punctuation\">:</span> <span class=\"token string\">'nickName'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">:</span> <span class=\"token string\">'provisionHistory'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같이 populate를 했을때의 응답을 보면 다음과 같이 구성되어 있다. reference로 가지고 있는 모델의 도큐먼트들이 populate 된 것을 확인해볼 수 있다. 그런데 populate 한 <code class=\"language-text\">provisionHistory</code>를 보면 이 도큐먼트에는 <code class=\"language-text\">memberId</code>가 또 다른 모델의 reference를 가지고 있다. 이때 이 reference도 populate하여 도큐먼트를 가지고 오고 싶으면 어떻게 해야 할까?</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"provisionHistory\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5df99a321cdd5a1efe0f19e0\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"usageType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"지급\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"givenDate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2019-11-10T15:00:00.000Z\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"memberId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5df99a04c26dcf1e3efaf866\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"__v\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"owner\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5df99a321cdd5a1efe0f1a02\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"itemType\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5df99a321cdd5a1efe0f19d1\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"아이맥\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"model\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5df99a321cdd5a1efe0f19d5\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"iMac A2115\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5df99a321cdd5a1efe0f1a02\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음과 같이 populate 쿼리를 보내면 된다. populate를 한 <code class=\"language-text\">provisionHistory</code> 도큐먼트에서 또 다시 populate 할 대상을 지정해주면 된다. 아래의 경우에서는 <code class=\"language-text\">memberId</code>를 populate 후 또다시 cell을 populate하여 가져온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Item<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">:</span> <span class=\"token string\">'itemType'</span><span class=\"token punctuation\">,</span> select<span class=\"token punctuation\">:</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">:</span> <span class=\"token string\">'model'</span><span class=\"token punctuation\">,</span> select<span class=\"token punctuation\">:</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">:</span> <span class=\"token string\">'owner'</span><span class=\"token punctuation\">,</span> select<span class=\"token punctuation\">:</span> <span class=\"token string\">'nickName'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    path<span class=\"token punctuation\">:</span> <span class=\"token string\">'provisionHistory'</span><span class=\"token punctuation\">,</span>\n    populate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      path<span class=\"token punctuation\">:</span> <span class=\"token string\">'memberId'</span><span class=\"token punctuation\">,</span>\n      select<span class=\"token punctuation\">:</span> <span class=\"token string\">'nickName cell'</span><span class=\"token punctuation\">,</span>\n      populate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">'cell'</span><span class=\"token punctuation\">,</span>\n        select<span class=\"token punctuation\">:</span> <span class=\"token string\">'name'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와같이 쿼리를 보냈을 때의 응답을 살펴보면 다음과 같이 구성된다. <code class=\"language-text\">memberId</code>와 <code class=\"language-text\">cell</code> 도큐먼트가 모두 populate 된 것을 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"provisionHistory\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5df99a321cdd5a1efe0f19e0\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"usageType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"지급\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"givenDate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2019-11-10T15:00:00.000Z\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"memberId\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5df99a04c26dcf1e3efaf866\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"nickName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"큐\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"cell\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5df999ff48730c1df8376d98\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"EX 셀\"</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"__v\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"owner\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5df99a321cdd5a1efe0f1a02\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"itemType\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5df99a321cdd5a1efe0f19d1\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"아이맥\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"model\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5df99a321cdd5a1efe0f19d5\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"iMac A2115\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5df99a321cdd5a1efe0f1a02\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"aggregate-메서드로-도큐먼트-그룹짓기\"><a href=\"#aggregate-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A1%9C-%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8-%EA%B7%B8%EB%A3%B9%EC%A7%93%EA%B8%B0\" aria-label=\"aggregate 메서드로 도큐먼트 그룹짓기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>aggregate 메서드로 도큐먼트 그룹짓기</h2>\n<p>몽고DB aggregate 메서드를 활용하여 특정 컬렉션의 모든 도큐먼트들을 어떤 기준을 바탕으로 그룹으로 묶을 수 있다. 예를들어 각 비품 종류의 고유번호 최댓값을 구하는 경우는 다음과 같다. <code class=\"language-text\">$group</code> 객체의 <code class=\"language-text\">_id</code> 프로퍼티는 모든 도큐먼트를 그룹짓는 기준이 된다. 여기서는 <code class=\"language-text\">itemType</code> (비품 종류)를 기준으로 그룹을 나누고 각 그룹의 최대 고유값을 찾는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> uniqueNumberOfEachItemType <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Item<span class=\"token punctuation\">.</span><span class=\"token function\">aggregate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    $group<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      _id<span class=\"token punctuation\">:</span> <span class=\"token string\">'$itemType'</span><span class=\"token punctuation\">,</span>\n      uniqueNumber<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> $max<span class=\"token punctuation\">:</span> <span class=\"token string\">'$uniqueNumber'</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음과 같이 위의 쿼리 결과를 보면 각 비품종류의 최대 고유값이 나왔다. 하지만 여기서의 문제점은 그룹을 묶는 기준인 <code class=\"language-text\">itemType</code>이 reference라는 점이다. 일반 쿼리였다면 populate하여 손쉽게 reference 도큐먼트의 정보를 가져왔겠지만 aggregate 메서드에서 그룹을 짓는 것과 함께 reference를 populate까지 해서 결과를 가져오는 방법은 잘 모르겠다. 이 기능은 aggregate 메서드에 대해 더 공부해서 가능한지 알아봐야겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"results\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5df99a321cdd5a1efe0f19d4\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"uniqueNumber\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5df99a321cdd5a1efe0f19d3\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"uniqueNumber\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5df99a321cdd5a1efe0f19d2\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"uniqueNumber\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5df99a321cdd5a1efe0f19d1\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"uniqueNumber\"</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>우선은 어쩔 수 없이 다음과 같이 여기서 나온 결과를 가지고 한번더 쿼리하여 itemType 이름을 가져오는 코드를 작성하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">uniqueNumberOfEachItemType <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>\n  uniqueNumberOfEachItemType<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> itemType <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> ItemType<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> uniqueNumber <span class=\"token operator\">=</span> el<span class=\"token punctuation\">.</span>uniqueNumber <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> itemType<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> uniqueNumber <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 확실히 내가 원하는 결과가 나온것을 확인해볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"results\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"모니터\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"uniqueNumber\"</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"노트북(윈도우)\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"uniqueNumber\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"맥북프로\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"uniqueNumber\"</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"아이맥\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"uniqueNumber\"</span><span class=\"token operator\">:</span> <span class=\"token number\">8</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"도큐먼트-업데이트시-runvalidator-옵션주기\"><a href=\"#%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8%EC%8B%9C-runvalidator-%EC%98%B5%EC%85%98%EC%A3%BC%EA%B8%B0\" aria-label=\"도큐먼트 업데이트시 runvalidator 옵션주기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도큐먼트 업데이트시 runvalidator 옵션주기</h2>\n<p>몽구스는 <code class=\"language-text\">enum</code> validator라는 데이터의 유효성을 검증하는 기능을 제공한다. <code class=\"language-text\">enum</code>은 몽구스 스키마를 정의할 때 해당 필드가 반드시 어떤 값만을 값으로 가져야 할 때 유용하게 사용할 수 있다. 예를들어 아래의 itemSchema를 보면 <code class=\"language-text\">usageType</code> 필드는 반드시 <code class=\"language-text\">[&#39;대여&#39;, &#39;지급&#39;, &#39;재고&#39;]</code> 중 하나를 값으로 가져야 한다. enum을 키로 하여 values를 정의했기 때문이다. <code class=\"language-text\">message</code> 프로퍼티를 통해 에러가 발생했을 때 보여줄 메시지를 내가 원하는 대로 정할 수 있다. 따로 정하지 않는다면 에러 발생시 디폴트 에러 메시지가 보여진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> itemSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  model<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">:</span> <span class=\"token string\">'ItemModel'</span><span class=\"token punctuation\">,</span> required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  price<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> Number<span class=\"token punctuation\">,</span> required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  usageType<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'재고'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">enum</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      values<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'대여'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'지급'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'재고'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      message<span class=\"token punctuation\">:</span> <span class=\"token string\">'usageType은 반드시 대여, 지급, 재고 중 하나여야 합니다.'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 이 컬렉션의 도큐먼트를 업데이트하는 코드를 보자. 몽구스에서 제공하는 빌트인 enum validator을 사용하기 위해서는 아래와 같이 <code class=\"language-text\">findByIdAndUpdate</code> 메서드의 세번째 인자에 <code class=\"language-text\">{runValidators: true}</code>옵션을 줘야 한다. 참고로 <code class=\"language-text\">{new: true}</code>는 유효성 검증과는 상관없으며 업데이트 된 후의 도큐먼트를 리턴하라는 옵션이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> updatedItem <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Item<span class=\"token punctuation\">.</span><span class=\"token function\">findByIdAndUpdate</span><span class=\"token punctuation\">(</span>\n  req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>item <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> runValidators<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같이 코드를 작성하고 <code class=\"language-text\">usageType</code>을 다른 값으로 하여 업데이트를 요청하면 다음과 같은 에러 메시지가 응답으로 온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Validation failed: usageType: usageType은 반드시 대여, 지급, 재고 중 하나여야 합니다.\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/nodejs/mongoose-queries","tagSlugs":["/tag/nodejs/","/tag/mongoose/"]},"frontmatter":{"date":"2019-12-16T23:10:37.121Z","description":"이 포스팅에서는 nodejs 어플리케이션을 개발하면서 새로 배웠거나 중요한 몽구스 쿼리에 대해 정리한다. populate한 도큐먼트의 특정필드를 다시 populate하기, aggregate 메서드로 도큐먼트 그룹짓기 etc... ","tags":["nodejs","mongoose"],"title":"Mongoose 주요쿼리 정리","socialImage":"/media/image-2.jpg"}}},"pageContext":{"slug":"/nodejs/mongoose-queries"}},"staticQueryHashes":["251939775","3439816877","401334301"]}
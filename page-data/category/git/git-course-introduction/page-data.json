{"componentChunkName":"component---src-templates-post-template-js","path":"/category/git/git-course-introduction/","webpackCompilationHash":"c57a7304ae121be2f1f2","result":{"data":{"markdownRemark":{"id":"740e7e51-bb92-53a6-a2d1-7ba0d013d8c4","html":"<blockquote>\n<p><strong><a href=\"https://opentutorials.org/module/2676\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">생활코딩 git</a></strong> 수업을 듣고 정리한 내용입니다.</p>\n</blockquote>\n<h1 id=\"버전-만들기init-config-add-commit\"><a href=\"#%EB%B2%84%EC%A0%84-%EB%A7%8C%EB%93%A4%EA%B8%B0init-config-add-commit\" aria-label=\"버전 만들기init config add commit permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>버전 만들기(init, config, add, commit)</h1>\n<p>버전관리를 원하는 폴더에서 <code class=\"language-text\">git init</code> 명령어를 치면 해당 폴더가 깃 저장소가 된다.\n<code class=\"language-text\">$ls -al</code> 명령어를 치면 .git 이라는 디렉토리가 생성된 것을 확인 할 수 있다. 이 디렉토리에는 버전관리를 하면서 생성되는 여러가지 정보가 저장된다.</p>\n<p><code class=\"language-text\">git config</code>는 버전을 만든 사람에 대한 정보를 설정한다. 이 설정은 ~/.gitconfig 파일에 저장된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"git\"><pre class=\"language-git\"><code class=\"language-git\">$git config --global user.name <span class=\"token string\">\"자신의 이름 또는 닉네임\"</span>\n$git config --global user.email <span class=\"token string\">\"자신의 이메일\"</span></code></pre></div>\n<p><code class=\"language-text\">$git add f1.txt</code> 명령어를 통해 git이 이 파일을 추적하기 시작합니다. 여러가지 파일이 있을 때 선택적으로 특정 파일만을 add하여 커밋할 수 있습니다. git add를 하게 되면 해당 파일은 커밋 대기 상태가 되고 stage area에 올라가게 됩니다. 여기서 커밋을 하게 되면 stage 위에 있는 파일들이 버전이 됩니다. 깃에는 stage 와 repository 라는 개념이 있습니다. stage는 커밋 대기 하고 있는 파일들이 가는 곳이고 커밋이 된 결과가 저장되는 곳이 repository 입니다.</p>\n<h1 id=\"변경사항-확인하기log-diff\"><a href=\"#%EB%B3%80%EA%B2%BD%EC%82%AC%ED%95%AD-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0log-diff\" aria-label=\"변경사항 확인하기log diff permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변경사항 확인하기(log, diff)</h1>\n<p><code class=\"language-text\">$git log</code> 커밋 메시지를 확인할 수 있다.<br>\n<code class=\"language-text\">$git log -p</code> 로그에 커밋간의 소스코드 차이를 출력해준다.\n<code class=\"language-text\">dc69213ca13e8c1619a2e277e8c83baa0e247431</code> 커밋 id는 해당 커밋 메시지가 가리키는 버전의 고유한 주소이다.<br>\n<code class=\"language-text\">$git diff commitID1..commitID2</code> 해당 커밋간의 차이를 출력해준다.</p>","fields":{"slug":"/category/git/git-course-introduction/","tagSlugs":["/tag/git/"]},"frontmatter":{"date":"2019-10-06T18:46:37.121Z","description":"Gatsby 블로그는 어떻게 글을 쓰면 되는지, 어떻게 올릴 수 있는지 알아봅시다.","tags":["git"],"title":"생활코딩 git 01 수업소개","socialImage":"/media/image-2.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/category/git/git-course-introduction/"}}}
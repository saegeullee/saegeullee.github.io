{"componentChunkName":"component---src-templates-category-template-js","path":"/category/nodejs","webpackCompilationHash":"2f0b27bdf748c3342184","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"fields":{"categorySlug":"/category/nodejs/","slug":"/nodejs/error-handling-middleware"},"frontmatter":{"date":"2019-11-16T12:00:37.121Z","description":"어플리케이션에서 발생할 수 있는 에러의 종류를 2가지로 나눠 생각해볼 수 있다. operational errors 와 programming errors이다. 전자는 시스템 운영상에 발생하는 에러로 프로그래머가 미리 예측할 수 있고 이에 대비해야 한다. 반면에 후자는 프로그래머가 잘못된 코드를 작성해서 발생하는 에러이다...","category":"nodejs","title":"에러 핸들링 미들웨어"}}},{"node":{"fields":{"categorySlug":"/category/nodejs/","slug":"/nodejs/middleware-and-the-request-response-cycle"},"frontmatter":{"date":"2019-11-15T17:30:37.121Z","description":"express app 이 클라이언트로부터 http request를 받으면 express app은 request와 response 객체를 만든다. 미들웨어는 주로 클라이언트에게 요청에 대한 유의미한 응답을 보내주기 위해 사용된다. 아래와같이 request object의 request body에 접근하기 위해서도 미들웨어를 사용한다...","category":"nodejs","title":"미들웨어와 요청응답 싸이클"}}},{"node":{"fields":{"categorySlug":"/category/nodejs/","slug":"/nodejs/how-nodejs-works"},"frontmatter":{"date":"2019-11-15T13:10:37.121Z","description":"nodejs runtime 은 몇 가지 dependency 가 있는데 그 중 가장 중요한 것이 v8 engine과 libuv이다. v8 engine이 없다면 nodejs는 javascript를 이해할 수 없다. v8 engine이 javascript 코드를 컴퓨터가 이해할 수 있는 머신 코드로 변환해주기 때문이다...","category":"nodejs","title":"Nodejs가 작동하는 방법"}}},{"node":{"fields":{"categorySlug":"/category/nodejs/","slug":"/nodejs/what-is-express"},"frontmatter":{"date":"2019-11-11T00:10:37.121Z","description":" Express is a minimal node.js framework, a higher level of abstraction. Express contains a very robust set of features: complex routing, easier handling of requests and responses, middleware, server-side rendering etc...","category":"nodejs","title":"Express 프레임워크"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"nodejs","currentPage":0,"postsLimit":4,"postsOffset":0,"prevPagePath":"/category/nodejs","nextPagePath":"/category/nodejs/page/1","hasPrevPage":false,"hasNextPage":true}}}
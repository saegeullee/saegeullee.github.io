{"componentChunkName":"component---src-templates-category-template-js","path":"/category/nodejs","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"fields":{"categorySlug":"/category/nodejs/","slug":"/nodejs/use-system-variables-in-profile"},"frontmatter":{"date":"2020-04-18T15:02:37.121Z","description":"Nodejs에서 시스템 profile의 환경변수를 사용하는 방법을 정리해본다.","category":"nodejs","title":"Nodejs에서 시스템 profile의 환경변수 사용하기"}}},{"node":{"fields":{"categorySlug":"/category/nodejs/","slug":"/nodejs/is-nodejs-single-threaded"},"frontmatter":{"date":"2020-01-05T17:10:37.121Z","description":"Nodejs의 이벤트루프는 싱글 스레드이다. Nodejs 어플리케이션이 실행되면 이벤트루프 인스턴스는 하나의 스레드에서 생성된다. 하지만 Nodejs의 `standard library`에 포함된 어떤 함수들은 싱글 스레드에서 실행되지 않는다. 이 함수들은 이벤트 루프가 실행되는 싱글 스레드 밖에서 실행이 된다...","category":"nodejs","title":"Nodejs 싱글스레드와 스레드풀"}}},{"node":{"fields":{"categorySlug":"/category/nodejs/","slug":"/nodejs/basics-of-process-and-thread"},"frontmatter":{"date":"2020-01-04T19:10:37.121Z","description":"프로세스는 실행되고 있는 프로그램의 인스턴스이다. 프로세스는 CPU 시간이나 메모리 등의 시스템 자원이 할당되는 독릭접인 개체이다. 각 프로세스는 별도의 주소 공간에서 실행되며, 한 프로세스는 다른 프로세스의 변수나 자료구조에 접근할 수 없다.","category":"nodejs","title":"프로세스, 스레드란"}}},{"node":{"fields":{"categorySlug":"/category/nodejs/","slug":"/nodejs/module-implementation"},"frontmatter":{"date":"2020-01-04T17:10:37.121Z","description":"Nodejs 서버를 만들 때 crypto nodejs 라이브러리의 pbkdf2 함수를 실행시키면 nodejs 내부적으로 어떤 일이 일어나는지를 정리해본다. ","category":"nodejs","title":"Nodejs 모듈이 구현되는 방법"}}},{"node":{"fields":{"categorySlug":"/category/nodejs/","slug":"/nodejs/mongoose-error-schema-hasnt-been-registered"},"frontmatter":{"date":"2019-12-18T12:10:37.121Z","description":"이 포스팅에서는 nodejs & mongoose 어플리케이션을 개발하다 발생한 Schema hasn't been registered for model 에러 원인과 해결방법에 대해 정리해본다.","category":"nodejs","title":"Mongoose 에러 Schema hasn't been registered"}}},{"node":{"fields":{"categorySlug":"/category/nodejs/","slug":"/nodejs/nodejs-import-dev-data"},"frontmatter":{"date":"2019-12-17T19:00:37.121Z","description":"이번에 진행한 프로젝트는 여건상 실제 DB 구축이 어려운 상황이었다. 개발 시작 초반에는 비품종류, 비품모델 몇개 정도만 DB에 넣어놓고 개발을 할 수 있었기 때문에 딱히 불편한 점이 없었지만 프로젝트가 조금씩 진행됨에 따라 데이터 스키마도 조금씩 변하면서 데이터베이스를 밀고 데이터베이스에 다시 데이터를 넣어야 되는 상황이 자주 발생하였다. 이에 따라 데이터베이스에 개발용 임시 데이터를 구축하는 스크립트를 작성하였고 이 과정을 정리해본다...","category":"nodejs","title":"Nodejs 서버 개발용 임시 DB 구축하기(MongoDB)"}}}]}},"pageContext":{"category":"nodejs","currentPage":0,"postsLimit":6,"postsOffset":0,"prevPagePath":"/category/nodejs","nextPagePath":"/category/nodejs/page/1","hasPrevPage":false,"hasNextPage":true}},"staticQueryHashes":["251939775","3439816877","401334301"]}